import java.io.*;
import java.net.*;
import java.util.*;

public class Server {

    static class Player implements Serializable {
        int id, x, y, score;
        boolean isTagger;
        public Player(int id, int x, int y, boolean isTagger) {
            this.id = id; this.x = x; this.y = y;
            this.score = 0; this.isTagger = isTagger;
        }
    }

    private static final int PORT = 12345;
    private static Map<Integer, Player> players = Collections.synchronizedMap(new HashMap<>());
    private static int nextId = 1;

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(PORT);
        System.out.println("🔹 Server started on port " + PORT);

        while (true) {
            Socket clientSocket = serverSocket.accept();
            System.out.println("🔹 New client connected: " + clientSocket.getInetAddress());

            int playerId = nextId++;
            Player newPlayer = new Player(playerId, 50 + 200*(playerId-1), 50, playerId==1);
            players.put(playerId, newPlayer);
            System.out.println("🔹 Added Player " + playerId);

            new Thread(new ClientHandler(clientSocket, playerId)).start();
        }
    }

    static class ClientHandler implements Runnable {
        private Socket socket;
        private int playerId;
        public ClientHandler(Socket socket, int playerId) { this.socket=socket; this.playerId=playerId; }

        public void run() {
            try (
                    ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                    ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
            ) {
                // 🔹 ส่ง playerId และ flush
                out.writeInt(playerId);
                out.flush();
                System.out.println("🔹 Sent player ID " + playerId + " to client");

                while (true) {
                    String cmd = (String) in.readObject();
                    System.out.println("🔹 Received command from Player " + playerId + ": " + cmd);
                    handleCommand(players.get(playerId), cmd);

                    synchronized(players) {
                        out.reset();
                        out.writeObject(new ArrayList<>(players.values()));
                        out.flush();
                        System.out.println("🔹 Sent updated player states to Player " + playerId);
                    }
                }
            } catch(Exception e) {
                System.out.println("🔹 Player " + playerId + " disconnected.");
                players.remove(playerId);
            }
        }
    }

    static void handleCommand(Player p, String cmd) {
        int speed = 5;
        switch(cmd) { case "UP": p.y-=speed; break; case "DOWN": p.y+=speed; break;
            case "LEFT": p.x-=speed; break; case "RIGHT": p.x+=speed; break; }

        System.out.println("🔹 Player " + p.id + " moved " + cmd + " -> (" + p.x + "," + p.y + ")");

        for(Player other: players.values()) {
            if(other.id != p.id) {
                double dist = Math.hypot(other.x - p.x, other.y - p.y);
                if(dist < 30) {
                    Player tagger = getTagger();
                    if(tagger.id == p.id) {
                        tagger.score++;
                        tagger.isTagger = false;
                        other.isTagger = true;
                        System.out.println("🔹 Player " + p.id + " tagged Player " + other.id);
                    }
                }
            }
        }
    }

    static Player getTagger() {
        for(Player p: players.values()) if(p.isTagger) return p;
        return null;
    }
}
